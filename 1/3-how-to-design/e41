;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname e41) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)
; an image of a car is constructed. The size of the car can be adjusted based on a single point: WHEEL-RADIUS.

(define WHEEL-RADIUS 5)
(define WIDTH-OF-WORLD 200)
(define HEIGHT-OF-WORLD (* WIDTH-OF-WORLD 0.25))

(define WHEEL-DISTANCE (* WHEEL-RADIUS 9))(define WHEEL
  (circle WHEEL-RADIUS "solid" "black"))

(define SPACE
  (rectangle (* WHEEL-RADIUS 4) (* WHEEL-RADIUS 0.01) "outline" "red"))

(define BOTH-WHEELS
  (beside WHEEL SPACE WHEEL))

(define CAR-BOTTOM
  (rectangle (* (image-width BOTH-WHEELS) 1.5) (* WHEEL-RADIUS 3) "solid" "red")
  )
(define CAR-TOP
  (rectangle (* (image-width CAR-BOTTOM) 0.5) (* (image-height CAR-BOTTOM) 0.5) "solid" "red")
  )

(define CAR-BODY
  (overlay/offset CAR-TOP (* (image-width CAR-BOTTOM) 0) (* (image-height CAR-BOTTOM) 0.65) CAR-BOTTOM)
  )

(define CAR
  (overlay/offset BOTH-WHEELS 0 (* WHEEL-RADIUS -2) CAR-BODY)
  )
  
;(place-image CAR
;             (* (image-width CAR) 0.5)
;             (- HEIGHT-OF-WORLD (* (image-height CAR) 0.5))
;             (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))

; WorldState -> WorldState 
; moves the car by 3 pixels for every clock tick
; examples: 
;   given: 20, expect 23
;   given: 78, expect 81
(define (tock ws)
  (+ ws 3))

;(check-expect (tock 20) 23)
;(check-expect (tock 78) 81)

(define TREE
  (underlay/xy (circle 10 "solid" "green")
               9 15
               (rectangle 2 20 "solid" "brown")))

(define BACKGROUND
  (place-image TREE(/ WIDTH-OF-WORLD 2) (- HEIGHT-OF-WORLD 15)
   (empty-scene WIDTH-OF-WORLD HEIGHT-OF-WORLD))
  )

(define Y-CAR
  (- HEIGHT-OF-WORLD (* (image-height CAR) 0.5))
  )

; WorldState -> Image
; places the car into the BACKGROUND scene,
; according to the given world state 
 (define (render ws)
   (place-image CAR ws Y-CAR BACKGROUND))



; num -> boolean
; evaluate whether the number car is out of the scene
; The car's coordinates need to be beyond the WIDTH-OF-WORLD limit, thus n needs to be the sum of WIDTH-OF-WORLD and the
; width of the car to evaluate as #true
 
(define (end? n)
  (if (> n (+ WIDTH-OF-WORLD (image-width CAR))) (and #true #true) (and #false #false))
  )



; WorldState -> WorldState
; launches the program from some initial state 
(big-bang 0
     [on-tick tock]
     [to-draw render]
     [stop-when end?]
  )